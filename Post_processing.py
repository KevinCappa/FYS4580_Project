############################################################################################################################################################################################################################################################################################################################################################################################## 
# FYS4580 PROJECT H24 - POST PROCESSING
##############################################################################################################################################################################################################################################################################################################################################################################################

import openmc # type: ignore
import openmc.deplete # type: ignore
import openmc.model # type: ignore
import matplotlib.pyplot as plt # type: ignore
import numpy as np
import csv
from mpl_toolkits.axes_grid1 import make_axes_locatable

##############################################################################################################################################################################################################################################################################################################################################################################################
# NEUTRON DISTRIBUTION MESH FILTER
##############################################################################################################################################################################################################################################################################################################################################################################################

sp = openmc.StatePoint('statepoint.100.h5')
tally = sp.tallies[1]
flux = tally.get_slice(scores=['flux'])
prompt = tally.get_slice(scores=['prompt-nu-fission'])
flux.std_dev.shape = (100, 100)
flux.mean.shape = (100, 100)
prompt.std_dev.shape = (100, 100)
prompt.mean.shape = (100, 100)

fig = plt.figure(figsize=(16, 12), dpi=500)

ax1 = plt.subplot(121)
ax1.set_title('Neutron flux distribution', size=25, y=1.05)
im1 = ax1.imshow(flux.mean)

divider = make_axes_locatable(ax1)
cax = divider.append_axes('right', size='5%', pad = 0.05)
fig.colorbar(im1, cax=cax, orientation = 'vertical')

ax2 = plt.subplot(122)
ax2.set_title('Fission site heatmap', size=25, y=1.05)
im2 = ax2.imshow(prompt.mean)

divider = make_axes_locatable(ax2)
cax = divider.append_axes('right', size='5%', pad = 0.05)
fig.colorbar(im2, cax=cax, orientation = 'vertical')

plt.savefig("Pictures/Mesh", dpi=500)

##############################################################################################################################################################################################################################################################################################################################################################################################
# NEUTRON ENERGY DISTRIBUTION
##############################################################################################################################################################################################################################################################################################################################################################################################

erange = np.logspace(base=10, start=-5, stop=7, num=501)

tally2 = sp.tallies[2]
flx = tally2.mean.ravel()
plt.figure()
plt.loglog(erange[:-1], flx)
plt.grid()
plt.xlabel("Energy eV")
plt.ylabel("Flux [n/cm-src]")
plt.title("Neutron energy spectrum")

plt.savefig("Pictures/Energy")

##############################################################################################################################################################################################################################################################################################################################################################################################
# REACTOR THERMAL UTILIZATION FACTOR
##############################################################################################################################################################################################################################################################################################################################################################################################

therm_abs_rate = sp.get_tally(name='therm. abs. rate')
fuel_therm_abs_rate = sp.get_tally(name='fuel therm. abs. rate')
therm_util = fuel_therm_abs_rate / therm_abs_rate
f_value = therm_util.get_pandas_dataframe()
print(f_value)

##############################################################################################################################################################################################################################################################################################################################################################################################
# BETA-DELAYED NEUTRONS
##############################################################################################################################################################################################################################################################################################################################################################################################

del_beta_n = sp.get_tally(name='del.nu.fis.')
tot_fission_n = sp.get_tally(name='tot.nu.fis.')
beta = del_beta_n / tot_fission_n
beta_value = beta.get_pandas_dataframe()
print(beta_value)

##############################################################################################################################################################################################################################################################################################################################################################################################
# DATA
##############################################################################################################################################################################################################################################################################################################################################################################################

keff = sp.keff #uncertainty.uflow
gt = sp.global_tallies


data = [keff]
csvfile = open('data.csv', 'a') 
csvwriter = csv.writer(csvfile)
csvwriter.writerow(data)
csvfile.close()

##############################################################################################################################################################################################################################################################################################################################################################################################
# DEPLETION
##############################################################################################################################################################################################################################################################################################################################################################################################

results = openmc.deplete.Results("./depletion_results.h5")
time, k = results.get_keff()
time /= (24 * 60 * 60)  # convert back to days from seconds
plt.figure()
plt.errorbar(time, k[:, 0], yerr=k[:, 1], capsize=3, fmt="r--", ecolor = "black")
plt.xlabel("Time [d]")
plt.ylabel("$k_{eff}\pm \sigma$");
plt.savefig("Pictures/depletion1",  dpi=500)

_time, u5 = results.get_atoms("1", "U235")
_time, xe135 = results.get_atoms("1", "Xe135")
plt.figure()
plt.plot(time, u5, label="U235")
plt.xlabel("Time [d]")
plt.ylabel("Number of atoms - U235");
plt.savefig("Pictures/depletion2")

plt.figure()
plt.plot(time, xe135, label="Xe135")
plt.xlabel("Time [d]")
plt.ylabel("Number of atoms - Xe135");
plt.savefig("Pictures/depletion3")

_time, u5_fission = results.get_reaction_rate("1", "U235", "fission")
plt.figure()
plt.plot(time, u5_fission)
plt.xlabel("Time [d]")
plt.ylabel("Fission reactions / s");
plt.savefig("Pictures/depletion4")

##############################################################################################################################################################################################################################################################################################################################################################################################
# END
##############################################################################################################################################################################################################################################################################################################################################################################################